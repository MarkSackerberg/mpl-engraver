//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MplEngraverError {
    /// 0 (0x0) - Invalid Instruction
    #[error("Invalid Instruction")]
    InvalidInstruction,
    /// 1 (0x1) - Invalid Account owner
    #[error("Invalid Account owner")]
    InvalidAccountOwner,
    /// 2 (0x2) - The mint does not match the metadata account
    #[error("The mint does not match the metadata account")]
    MintMetadataMismatch,
    /// 3 (0x3) - The mint does not match the token account
    #[error("The mint does not match the token account")]
    MintTokenMismatch,
    /// 4 (0x4) - The edition supply is not zero
    #[error("The edition supply is not zero")]
    EditionSupplyMismatch,
    /// 5 (0x5) - The derived PDA is not valid
    #[error("The derived PDA is not valid")]
    DerivedKeyInvalid,
}

impl solana_program::program_error::PrintProgramError for MplEngraverError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
